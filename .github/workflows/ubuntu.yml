name: ubuntu

on: [push, pull_request]

jobs:
  build:
  
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-22.04] #, ubuntu-20.04]
        build_type: ["Debug"] #, "Release"]
        generator: ["Ninja"] #, "Unix Makefiles"]

    env:
      CC: gcc-10
      CXX: g++-10
      BUILD_DIR: ${{github.workspace}}/build/${{matrix.build_type}}

    steps:
    - uses: actions/checkout@v3

    - name: Install Ninja
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build
        sudo apt-get install -y xorg
        sudo apt-get install -y libgl1-mesa-dev
        sudo apt-get install -y libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxi-dev libxinerama-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-util-dev

        
    - name: Install Conan
      run: |
        pip install conan
        conan profile new default --detect 
        conan profile update settings.compiler=gcc default
        conan profile update settings.compiler.version=10 default
        conan profile update settings.compiler.libcxx=libstdc++11 default
    
        export CONAN_SYSREQUIRES_SUDO=1
        export CONAN_SYSREQUIRES_MODE=enabled
        export DEBIAN_FRONTEND=noninteractive
        
        conan profile show default
        conan install . \
          -c tools.system.package_manager:mode=install \
          --install-folder ${{env.BUILD_DIR}}/modules \
          --settings build_type=${{matrix.build_type}} \
          --settings compiler=gcc \
          --settings compiler.version=10 \
          --build missing \
          --update
        
    - name: Configure
      run: |
        echo Configure
        cmake -S . -B ${{env.BUILD_DIR}} -G ${{matrix.generator}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DVIDEO_IO_BUILD_TESTS=OFF
    
    - name: Build
      run: |
        echo Build
        cmake --build ${{env.BUILD_DIR}} --config ${{matrix.build_type}}
    
    - name: Test
      run: |
        echo Test
        ctest --test-dir ${{env.BUILD_DIR}} --config ${matrix.build_type} --output-junit results.xml --output-on-failure -j$(nproc)
